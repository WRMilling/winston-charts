{{- $kind := (include "authelia.pod.kind" .) }}
---
apiVersion: {{ include "capabilities.apiVersion.kind" (merge (dict "Kind" $kind) .) }}
kind: {{ $kind }}
metadata:
  name: {{ include "authelia.name" . }}
  labels: {{ include "authelia.labels" (merge (dict "Labels" .Values.pod.labels) .) | nindent 4 }}
  {{- with $annotations := include "authelia.annotations" (merge (dict "Annotations" .Values.pod.annotations) .) }}
  annotations: {{ $annotations | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels: {{ include "authelia.matchLabels" . | nindent 6 }}
  revisionHistoryLimit: {{ default 5 .Values.pod.revisionHistoryLimit }}
  {{- if or (eq "Deployment" $kind) (eq "DaemonSet" $kind) }}
  minReadySeconds: {{ default 0 .Values.pod.minReadySeconds }}
  {{- end }}
  {{- if (eq "Deployment" $kind)}}
  replicas: {{ default 1 .Values.pod.replicas }}
  {{- with $strategy := .Values.pod.strategy }}
  strategy:
    type: {{ include "authelia.deploymentStrategy" . }}
    {{- if and $strategy.rollingUpdate (eq (include "authelia.deploymentStrategy" $) "RollingUpdate") }}
    rollingUpdate: {{ toYaml $strategy.rollingUpdate | nindent 6 }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- if (eq "DaemonSet" $kind) }}
  updateStrategy:
    type: {{ include "authelia.deploymentStrategy" . }}
  {{- end }}
  {{- if eq "StatefulSet" $kind }}
  {{- if (include "authelia.stateful" .) }}
  replicas: 1
  podManagementPolicy: Parallel
  {{- else }}
  replicas: {{ default 1 .Values.pod.replicas }}
  podManagementPolicy: {{ default "Parallel" .Values.pod.managementPolicy }}
  {{- end }}
  serviceName: {{ default (include "authelia.name" .) .Values.pod.serviceName }}
  {{- end }}
  {{- if eq "Deployment" $kind }}
  {{- end }}
  template:
    metadata:
      labels: {{ include "authelia.labels" (merge (dict "Labels" .Values.pod.labels) .) | nindent 8 }}
      {{- with $annotations := include "authelia.annotations" (merge (dict "Annotations" .Values.pod.podAnnotations) .) }}
      annotations: {{ $annotations | nindent 8 }}
    {{- end }}
    spec:
      {{- with $tolerations := .Values.pod.tolerations }}
      tolerations: {{ toYaml $tolerations | nindent 8 }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      {{- with $nodeName := .Values.pod.selectors.nodeName }}
      nodeName: {{ $nodeName }}
      {{- end }}
      {{- with $selector := .Values.pod.selectors.nodeSelector }}
      nodeSelector: {{ toYaml $selector | nindent 8 }}
      {{- end }}
      {{- with $affinity := .Values.pod.selectors.affinity }}
      affinity: {{ toYaml $affinity | nindent 8 }}
      {{- end }}
      {{- with $context := .Values.pod.securityContext.container }}
      securityContext: {{ toYaml $context | nindent 8 }}
      {{- end }}
      containers:
        - name: authelia
          image: {{ include "authelia.image" . }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
          {{- with $pullSecrets := .Values.image.pullSecrets }}
          imagePullSecrets:
            {{- range $k, $secretName := $pullSecrets }}
            - name: {{ $secretName }}
          {{- end }}
          {{- end }}
          command: [ "authelia" ]
          args:
            - --config=/config/configuration.yaml
          {{- with $resources :=.Values.pod.resources }}
          resources: {{ toYaml $resources | nindent 12 }}
          {{- end }}
          env:
            - name: AUTHELIA_JWT_SECRET_FILE
              value: /config/secrets/JWT_TOKEN
            - name: AUTHELIA_SESSION_SECRET_FILE
              value: /config/secrets/SESSION_ENCRYPTION_KEY
            {{- if .Values.configMap.authentication_backend.ldap }}
            - name: AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE
              value: /config/secrets/LDAP_PASSWORD
            {{- end }}
            {{- if or (include "authelia.configured.smtp" .) (include "authelia.configured.smtpSecret" .) }}
            - name: AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
              value: /config/secrets/SMTP_PASSWORD
            {{- end }}
            {{- if .Values.configMap.storage.postgres }}
            - name: AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE
              value: /config/secrets/STORAGE_PASSWORD
            {{- end }}
            {{- if .Values.configMap.storage.mysql }}
            - name: AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE
              value: /config/secrets/STORAGE_PASSWORD
            {{- end }}
            {{- if and (include "authelia.configured.redisSecret" .) (include "authelia.configured.redis" .) }}
            - name: AUTHELIA_SESSION_REDIS_PASSWORD_FILE
              value: /config/secrets/REDIS_PASSWORD
            {{- end }}
            {{- if and (include "authelia.configured.duo" .) (or (include "authelia.configured.duoSecret" .) (hasKey .Values.secret "existingSecret")) }}
            - name: AUTHELIA_DUO_API_SECRET_KEY_FILE
              value: /config/secrets/DUO_API_KEY
          {{- end }}
          {{- with $env := .Values.pod.env }}{{ toYaml $env | nindent 12 }}{{- end }}
          ports:
            - name: http
              containerPort: {{ default 9091  .Values.configMap.port }}
              protocol: TCP
          {{- with $probe := include "authelia.merge.probe" (merge (dict "Type" "startup" "Method" .Values.pod.probes.method "Probe" .Values.pod.probes.startup) .) }}
          {{- $probe | nindent 10 }}
          {{- end }}
          {{- with $probe := include "authelia.merge.probe" (merge (dict "Type" "liveness" "Method" .Values.pod.probes.method "Probe" .Values.pod.probes.liveness) .) }}
          {{- $probe | nindent 10 }}
          {{- end }}
          {{- with $probe := include "authelia.merge.probe" (merge (dict "Type" "readiness" "Method" .Values.pod.probes.method "Probe" .Values.pod.probes.readiness) .) }}
          {{- $probe | nindent 10 }}
          {{- end }}
          volumeMounts:
            {{- if (include "authelia.enabled.persistentVolumeClaim" .) }}
            - mountPath: /config
              name: authelia
              readOnly: {{ .Values.persistence.readOnly }}
              {{- with $subPath := .Values.persistence.subPath }}
              subPath: {{ $subPath }}
              {{- end }}
              {{- with $subPathExpr := .Values.persistence.subPathExpr }}
              subPathExpr: {{ $subPathExpr }}
              {{- end }}
              {{- with $mountPropagation := .Values.persistence.mountPropagation }}
              mountPropagation: {{ $mountPropagation }}
            {{- end }}
            {{- end }}
            {{- if (include "authelia.enabled.configMap" .) }}
            - mountPath: /config
              name: config
              readOnly: false
            {{- end }}
            - mountPath: /config/secrets
              name: secrets
              readOnly: true
            {{- if (include "authelia.enabled.certificatesSecret" .) }}
            - mountPath: /config/certificates
              name: certificates
              readOnly: true
          {{- end }}
          {{- with $mounts := .Values.pod.extraVolumeMounts }}
          {{ toYaml $mounts | indent 12 }}
          {{- end }}
          {{- with $context := .Values.pod.securityContext.pod }}
          securityContext: {{ toYaml $context | nindent 12 }}
      {{- end }}
      volumes:
        {{- if (include "authelia.enabled.persistentVolumeClaim" .) }}
        - name: authelia
          persistentVolumeClaim:
            claimName: {{ default (include "authelia.name" .) .Values.persistence.existingClaim }}
        {{- end }}
        {{- if (include "authelia.enabled.configMap" .) }}
        - name: config
          configMap:
            name: {{ default (include "authelia.name" .) .Values.configMap.existingConfigMap }}
            items:
              - key: {{ default "configuration.yaml" .Values.configMap.key }}
                path: configuration.yaml
        {{- end }}
        - name: secrets
          secret:
            secretName: {{ default (include "authelia.name" .) .Values.secret.existingSecret }}
            items:
              - key: {{ default "JWT_TOKEN" .Values.secret.jwt.key }}
                path: JWT_TOKEN
              - key: {{ default "SESSION_ENCRYPTION_KEY" .Values.secret.session.key }}
                path: SESSION_ENCRYPTION_KEY
              {{- if or .Values.configMap.storage.postgres .Values.configMap.storage.mysql }}
              - key: {{ default "STORAGE_PASSWORD" .Values.secret.storage.key }}
                path: STORAGE_PASSWORD
              {{- end }}
              {{- if .Values.configMap.authentication_backend.ldap }}
              - key: {{ default "LDAP_PASSWORD" .Values.secret.ldap.key }}
                path: LDAP_PASSWORD
              {{- end }}
              {{- if or (include "authelia.configured.smtp" .) (include "authelia.configured.smtpSecret" .) }}
              - key: {{ default "SMTP_PASSWORD" .Values.secret.smtp.key }}
                path: SMTP_PASSWORD
              {{- end }}
              {{- if and (include "authelia.configured.redisSecret" .) (include "authelia.configured.redis" .) }}
              - key: {{ default "REDIS_PASSWORD" .Values.secret.redis.key }}
                path: REDIS_PASSWORD
              {{- end }}
              {{- if .Values.configMap.duo_api }}
              - key: {{ default "DUO_API_KEY" .Values.secret.duo.key }}
                path: DUO_API_KEY
        {{- end }}
        {{- if (include "authelia.enabled.certificatesSecret" .) }}
        - name: certificates
          secret:
            secretName: {{ include "authelia.names.certificatesSecret" . }}
  {{- end }}
  {{- with .Values.pod.extraVolumes }}
  {{ toYaml . | indent 6 }}
  {{- end }}